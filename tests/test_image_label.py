import unittest
from unittest.mock import patch, MagicMock
import numpy as np
from hardware_interface.camera import CameraProcessor, SingletonCamera

class TestCameraDetectionLabels(unittest.TestCase):

    @patch.object(SingletonCamera, 'get_frame')
    def test_object_detection_labels(self, mock_get_frame):
        """
        Test the object detection labeling to verify what objects are tagged in the frame.
        """

        # Create a mock frame resembling an actual camera capture
        mock_frame = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
        mock_get_frame.return_value = mock_frame

        # Initialize the CameraProcessor
        camera_processor = CameraProcessor()

        # Mock the interpreter's output to simulate detected objects
        with patch.object(camera_processor, 'detect_objects') as mock_detect_objects:
            mock_detect_objects.return_value = [
                {'label': 'Class 1', 'box': [0.1, 0.1, 0.2, 0.2]},
                {'label': 'Class 2', 'box': [0.3, 0.3, 0.4, 0.4]}
            ]

            # Run the detection
            detected_objects = camera_processor.detect_objects(mock_frame)

            # Verify the returned labels and boxes
            self.assertEqual(len(detected_objects), 2, "Should detect two objects.")

            # Check the details of each detected object
            self.assertEqual(detected_objects[0]['label'], 'Class 1', "First object label should be 'Class 1'.")
            self.assertEqual(detected_objects[0]['box'], [0.1, 0.1, 0.2, 0.2], "First object box should match.")

            self.assertEqual(detected_objects[1]['label'], 'Class 2', "Second object label should be 'Class 2'.")
            self.assertEqual(detected_objects[1]['box'], [0.3, 0.3, 0.4, 0.4], "Second object box should match.")

    @patch.object(SingletonCamera, 'get_frame')
    def test_detected_object_labels_with_model(self, mock_get_frame):
        """
        This test will run the detection on a real captured frame to see actual labels generated by the model.
        This requires the real model to be loaded and executed.
        """

        # Mock frame data to simulate an actual frame
        mock_frame = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
        mock_get_frame.return_value = mock_frame

        # Initialize the CameraProcessor with real model execution
        camera_processor = CameraProcessor()

        # Run the detection using the actual TFLite model
        detected_objects = camera_processor.detect_objects(mock_frame)

        # Print the detected objects to observe their labels and boxes
        print("Detected Objects:", detected_objects)

        # Basic assertion to ensure the list is returned
        self.assertIsInstance(detected_objects, list, "Detected objects should be a list.")

if __name__ == '__main__':
    unittest.main()
