name: CI

on:
  push:
    branches: [ main, improvements ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run black (code formatting check)
        run: |
          black --check --diff src/ tests/ scripts/ *.py || (echo '::warning::black formatting check failed. Please run black locally.' && exit 1)
      - name: Run isort (import sorting check)
        run: |
          isort --check-only --diff src/ tests/ scripts/ *.py || (echo '::warning::isort import sorting check failed. Please run isort locally.' && exit 1)
      - name: Run pylint
        run: |
          pylint src/mower/ --disable=C0114,C0115,C0116 --fail-under=7.0 || (echo '::warning::pylint score below threshold. Please review warnings.' && exit 1)
      - name: Run mypy (type checking)
        run: |
          mypy src/mower/ --ignore-missing-imports --no-strict-optional || (echo '::warning::mypy type checking failed. Please run mypy locally.' && exit 1)

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev pkg-config
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-benchmark hypothesis
          pip install .[dev,test]
      - name: Mock hardware dependencies
        run: |
          mkdir -p mock_modules
          echo "class GPIO: pass" > mock_modules/RPi.py
          echo "def setmode(*args): pass" >> mock_modules/RPi.py
          echo "def setup(*args): pass" >> mock_modules/RPi.py
          echo "def output(*args): pass" >> mock_modules/RPi.py
          echo "def cleanup(*args): pass" >> mock_modules/RPi.py
          echo "def input(*args): return 0" >> mock_modules/RPi.py
          echo "class SMBus: pass" > mock_modules/smbus2.py
          echo "class Serial: pass" > mock_modules/serial.py
          echo "class PiCamera2: pass" > mock_modules/picamera2.py
          echo "class gpiod: pass" > mock_modules/gpiod.py
          echo "class Board: pass" > mock_modules/board.py
          echo "class DigitalInOut: pass" > mock_modules/digitalio.py
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)/mock_modules" >> $GITHUB_ENV
      - name: Run all tests (unit, simulation, navigation, obstacle detection, integration, regression, benchmarks)
        run: |
          pytest tests/unit -v || true
          pytest tests/simulation -v || true
          pytest tests/navigation -v || true
          pytest tests/obstacle_detection -v || true
          pytest tests/integration -v || true
          pytest tests/regression -v || true
          pytest tests/benchmarks -v || true
      - name: Run tests with coverage
        run: |
          pytest --cov=src/mower --cov-report=xml --cov-report=html || true
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration:
    name: Service Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install .[dev,test]
      - name: Mock hardware dependencies
        run: |
          mkdir -p mock_modules
          echo "class GPIO: pass" > mock_modules/RPi.py
          echo "def setmode(*args): pass" >> mock_modules/RPi.py
          echo "def setup(*args): pass" >> mock_modules/RPi.py
          echo "def output(*args): pass" >> mock_modules/RPi.py
          echo "def cleanup(*args): pass" >> mock_modules/RPi.py
          echo "def input(*args): return 0" >> mock_modules/RPi.py
          echo "class SMBus: pass" > mock_modules/smbus2.py
          echo "class Serial: pass" > mock_modules/serial.py
          echo "class PiCamera2: pass" > mock_modules/picamera2.py
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)/mock_modules" >> $GITHUB_ENV
      - name: Run integration tests and service startup
        run: |
          pytest tests/integration -v || true
          pytest tests/integration/test_service_startup.py -v || true
